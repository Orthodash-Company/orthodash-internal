import { Express } from "express";
import jsPDF from "jspdf";

// Simple PDF generation for reports
export function setupPDFRoutes(app: Express) {
  app.post("/api/export/pdf", async (req, res) => {
    try {
      const { reportData, options } = req.body;
      
      // Create a beautiful PDF report
      const doc = new jsPDF({
        orientation: options.orientation || 'portrait',
        unit: 'mm',
        format: options.pageFormat || 'a4'
      });

      // Header
      doc.setFontSize(24);
      doc.setFont('helvetica', 'bold');
      doc.text(options.title || 'ORTHODASH Analytics Report', 20, 25);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Generated on ${new Date().toLocaleDateString()}`, 20, 35);
      
      if (options.description) {
        doc.text(options.description, 20, 45);
      }

      // Summary Section
      let yPosition = 60;
      
      doc.setFontSize(16);
      doc.setFont('helvetica', 'bold');
      doc.text('Report Summary', 20, yPosition);
      yPosition += 10;
      
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      
      if (reportData.periods) {
        doc.text(`Analysis Periods: ${reportData.periods.length}`, 20, yPosition);
        yPosition += 8;
        
        reportData.periods.forEach((period: any, index: number) => {
          doc.text(`${index + 1}. ${period.title || period.name} (${period.startDate} - ${period.endDate})`, 25, yPosition);
          yPosition += 6;
        });
      }

      // Add page for charts if requested
      if (options.includeCharts && reportData.periodQueries) {
        doc.addPage();
        yPosition = 25;
        
        doc.setFontSize(16);
        doc.setFont('helvetica', 'bold');
        doc.text('Charts & Visualizations', 20, yPosition);
        yPosition += 15;
        
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        doc.text('Note: Chart data exported from ORTHODASH analytics platform', 20, yPosition);
      }

      // Add data tables if requested
      if (options.includeData && reportData.periodQueries) {
        doc.addPage();
        yPosition = 25;
        
        doc.setFontSize(16);
        doc.setFont('helvetica', 'bold');
        doc.text('Data Tables', 20, yPosition);
        yPosition += 15;
        
        reportData.periodQueries.forEach((query: any, index: number) => {
          if (query && Object.keys(query).length > 0) {
            doc.setFontSize(12);
            doc.setFont('helvetica', 'bold');
            doc.text(`Period ${index + 1} Data`, 20, yPosition);
            yPosition += 8;
            
            doc.setFontSize(9);
            doc.setFont('helvetica', 'normal');
            
            // Simple data representation
            Object.entries(query).forEach(([key, value]) => {
              if (typeof value === 'object') {
                doc.text(`${key}: ${JSON.stringify(value)}`, 25, yPosition);
              } else {
                doc.text(`${key}: ${value}`, 25, yPosition);
              }
              yPosition += 5;
              
              // Add new page if needed
              if (yPosition > 270) {
                doc.addPage();
                yPosition = 25;
              }
            });
            
            yPosition += 10;
          }
        });
      }

      // Footer
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setFont('helvetica', 'normal');
        doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 30, doc.internal.pageSize.height - 10);
        doc.text('Generated by ORTHODASH Analytics Platform', 20, doc.internal.pageSize.height - 10);
      }

      const pdfBuffer = Buffer.from(doc.output('arraybuffer'));
      
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${options.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf"`);
      res.send(pdfBuffer);
      
    } catch (error) {
      console.error('PDF generation error:', error);
      res.status(500).json({ error: 'Failed to generate PDF' });
    }
  });
}